{"ast":null,"code":"import { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst URL = 'http://localhost:3000';\nclass PlaylistService {\n  // usersPlaylistsSubject: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  constructor(http, route) {\n    this.http = void 0;\n    this.route = void 0;\n    this.playlists$ = new BehaviorSubject([]);\n    this.playlistMoviesSubject = new Subject();\n    this.public = void 0;\n    this.http = http;\n    this.route = route;\n  }\n  fetchAllPlaylists() {\n    // console.log('fetching all playlists')\n    return this.http.get(`${URL}/playlists`).pipe(tap(data => {\n      console.log('Playlists:', data); // Add this line\n    }));\n  }\n\n  fetchSinglePlaylist(id) {\n    return this.http.get(`${URL}/playlists/${id}`);\n  }\n  onDeleteMovie(movieId, playlistId) {\n    const token = JSON.parse(localStorage.getItem('token'));\n    return this.http.delete(`${URL}/playlists/${playlistId}/movies/${movieId}`, {\n      headers: {\n        Authorization: `Bearer ${token.value}`\n      }\n    });\n  }\n  onAddMovie(movie, playlistId) {\n    return new Observable(observer => {\n      this.fetchSinglePlaylist(playlistId).subscribe(playlist => {\n        if (!playlist.movies) {\n          playlist.movies = []; // Initialize the 'movies' property as an array\n        }\n\n        playlist.movies.push(movie);\n        this.playlistMoviesSubject.next(playlist);\n        console.log(movie);\n        const token = JSON.parse(localStorage.getItem('token'));\n        this.http.post(`${URL}/playlists/${playlistId}/movies`, {\n          movie\n        }, {\n          headers: {\n            Authorization: `Bearer ${token.value}`\n          }\n        }).subscribe(res => {\n          observer.next(res);\n          observer.complete();\n          console.log(res);\n        }, error => {\n          observer.error(error);\n        });\n      });\n    });\n  }\n  createUserPlaylist(name) {\n    const token = JSON.parse(localStorage.getItem('token'));\n    return this.http.post(`${URL}/playlists`, {\n      name\n    });\n  }\n  deletePlaylist(id) {\n    const token = JSON.parse(localStorage.getItem('token'));\n    return this.http.delete(`${URL}/playlists/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token.value}`\n      }\n    });\n  }\n}\nPlaylistService.ɵfac = function PlaylistService_Factory(t) {\n  return new (t || PlaylistService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute));\n};\nPlaylistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlaylistService,\n  factory: PlaylistService.ɵfac,\n  providedIn: 'root'\n});\nexport { PlaylistService };","map":{"version":3,"mappings":"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","names":["BehaviorSubject","Observable","Subject","tap","URL","PlaylistService","constructor","http","route","playlists$","playlistMoviesSubject","public","fetchAllPlaylists","get","pipe","data","console","log","fetchSinglePlaylist","id","onDeleteMovie","movieId","playlistId","token","JSON","parse","localStorage","getItem","delete","headers","Authorization","value","onAddMovie","movie","observer","subscribe","playlist","movies","push","next","post","res","complete","error","createUserPlaylist","name","deletePlaylist","i0","ɵɵinject","i1","HttpClient","i2","ActivatedRoute","factory","ɵfac","providedIn"],"sourceRoot":"","sources":["/Users/saralou/Desktop/Portfolio Projects/MovieMix-FE/src/app/services/playlist.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nconst URL = 'http://localhost:3000';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PlaylistService {\n  private playlists$ = new BehaviorSubject<any[]>([]);\n  playlistMoviesSubject: Subject<any> = new Subject();\n  // usersPlaylistsSubject: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n\n  constructor(\n    private http: HttpClient, \n    private route: ActivatedRoute, \n    ) { }\n\n  \n  public \n  \n  \n  fetchAllPlaylists(): Observable<any> {\n    // console.log('fetching all playlists')\n    return this.http.get(`${URL}/playlists`).pipe(\n      tap((data) => {\n        console.log('Playlists:', data); // Add this line\n      })\n    );\n  }\n\n  fetchSinglePlaylist(id:any){\n    return this.http.get(`${URL}/playlists/${id}`)\n  }\n\n\n  onDeleteMovie(movieId: any, playlistId: any){\n    const token = JSON.parse(localStorage.getItem('token'));\n    return this.http.delete(`${URL}/playlists/${playlistId}/movies/${movieId}`, {\n      headers: {\n        Authorization: `Bearer ${token.value}`,\n      },\n    });\n  }\n\n  onAddMovie(movie: any, playlistId: any) {\n    return new Observable((observer) => {\n      this.fetchSinglePlaylist(playlistId).subscribe((playlist: any) => {\n        if (!playlist.movies) {\n          playlist.movies = []; // Initialize the 'movies' property as an array\n        }\n        playlist.movies.push(movie);\n        this.playlistMoviesSubject.next(playlist);\n        console.log(movie)\n        const token = JSON.parse(localStorage.getItem('token'));\n        this.http\n          .post(\n            `${URL}/playlists/${playlistId}/movies`,\n            { movie },\n            {\n              headers: {\n                Authorization: `Bearer ${token.value}`,\n              },\n            }\n          )\n          .subscribe(\n            (res) => {\n              observer.next(res);\n              observer.complete();\n              console.log(res);\n            },\n            (error) => {\n              observer.error(error);\n            }\n          );\n      });\n    });\n  }\n\n  createUserPlaylist(name: any){\n    const token = JSON.parse(localStorage.getItem('token'));\n\n    return this.http.post(\n      `${URL}/playlists`,\n      {name},\n    );\n  }\n\n  deletePlaylist(id: any){\n    const token = JSON.parse(localStorage.getItem('token'));\n    return this.http.delete(`${URL}/playlists/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token.value}`,\n      },\n    });\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}